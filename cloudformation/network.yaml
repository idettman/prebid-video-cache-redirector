AWSTemplateFormatVersion: '2010-09-09'
Description: This stack creates a VPC constisting of two private and two public subnets, Internet Gateway, NAT Gateway

Mappings:
  Subnets:
    VPC:
      Name: 'prebid-vpc'
      CIDR: '172.54.0.0/16'
      InternetGWName: 'prebid-igw'
      RouteTableName: 'prebid-pubic-routing-table'
      ECSClusterName: 'prebid-ecs-cluster'
    PrivateOne:
      Name: 'prebid-private-subnet-az1'
      CIDR: '172.54.0.0/20'
      RouteTableName: 'prebid-private-routing-table-az1'
    PrivateTwo:
      Name: 'prebid-private-subnet-az2'
      CIDR: '172.54.16.0/20'
      RouteTableName: 'prebid-private-routing-table-az2'
    PublicOne:
      Name: 'prebid-public-subnet-az1'
      CIDR: '172.54.32.0/20'
      NATGWName: 'prebid-nat-gateway-az1'
    PublicTwo:
      Name: 'prebid-public-subnet-az2'
      CIDR: '172.54.48.0/20'
      NATGWName: 'prebid-nat-gateway-az2'

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: false
      CidrBlock: !FindInMap ['Subnets', 'VPC', 'CIDR']
      Tags:
        - Key: 'Name'
          Value: !FindInMap ['Subnets', 'VPC', 'Name']

  # Private subnets
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['Subnets', 'PrivateOne', 'CIDR']
      Tags:
        - Key: 'Name'
          Value: !FindInMap ['Subnets', 'PrivateOne', 'Name']
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['Subnets', 'PrivateTwo', 'CIDR']
      Tags:
        - Key: 'Name'
          Value: !FindInMap ['Subnets', 'PrivateTwo', 'Name']

  # Public subnets
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['Subnets', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: !FindInMap ['Subnets', 'PublicOne', 'Name']
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['Subnets', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: !FindInMap ['Subnets', 'PublicTwo', 'Name']

  # Internet Gateway for public subnets
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: 'Name'
          Value: !FindInMap ['Subnets', 'VPC', 'InternetGWName']
  InternetGatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref 'InternetGateway'

  # Route table for public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !FindInMap ['Subnets', 'VPC', 'RouteTableName']
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateways for private subnets
  NATGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNATOne.AllocationId
      SubnetId: !Ref PublicSubnetOne
      Tags:
        - Key: 'Name'
          Value: !FindInMap ['Subnets', 'PublicOne', 'NATGWName']
  NATGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNATTwo.AllocationId
      SubnetId: !Ref PublicSubnetTwo
      Tags:
        - Key: 'Name'
          Value: !FindInMap ['Subnets', 'PublicTwo', 'NATGWName']
  EIPNATOne:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachement
    Properties:
      Domain: vpc
  EIPNATTwo:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachement
    Properties:
      Domain: vpc

  # Route tables for private subnets
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !FindInMap ['Subnets', 'PrivateOne', 'RouteTableName']
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !FindInMap ['Subnets', 'PrivateTwo', 'RouteTableName']
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo

  # ECS cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !FindInMap ['Subnets', 'VPC', 'ECSClusterName']

Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref VPC
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref PublicSubnetOne
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref PublicSubnetTwo
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]
  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref PrivateSubnetOne
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetOne' ] ]
  PrivateSubnetTwo:
    Description: Private subnet two
    Value: !Ref PrivateSubnetTwo
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetTwo' ] ]
